// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
}

model Workflow {
  id            String    @id @default(cuid())
  userId        String
  name          String
  description   String?
  definition    String
  status        String
  lastRunAt     DateTime?
  lastRunId     String?
  lastRunStatus String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  executions WorkflowExecution[]

  @@unique([name, userId])
}

model WorkflowExecution {
  id          String    @id @default(cuid())
  workflowId  String
  userId      String
  trigger     String
  status      String
  createdAt   DateTime  @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  definition  String    @default("{}")

  phases   ExecutionPhase[]
  workflow Workflow         @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}

model ExecutionPhase {
  id                  String            @id @default(cuid())
  userId              String
  status              String
  number              Int
  node                String
  name                String
  startedAt           DateTime?
  completedAt         DateTime?
  inputs              String?
  outputs             String?
  workflowExecutionId String
  execution           WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)
  logs                ExecutionLog[]
}

model ExecutionLog {
  id               String         @id @default(cuid())
  logLevel         String
  message          String
  timestamp        DateTime       @default(now())
  executionPhaseId String
  executionPhase   ExecutionPhase @relation(fields: [executionPhaseId], references: [id], onDelete: Cascade)
}
